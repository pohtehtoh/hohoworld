//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Gun/Shoot.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Shoot : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Shoot()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Shoot"",
    ""maps"": [
        {
            ""name"": ""ShootMain"",
            ""id"": ""84633457-5dce-41c1-a52d-4bae9e33c38b"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""98efca4d-c988-4c52-9d20-7ae3d960682f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""d0347517-1057-48d9-ae22-442e30bcc2b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""354e5cba-5042-4876-9c48-4724c23a7e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRight"",
                    ""type"": ""Button"",
                    ""id"": ""df982d4d-a36c-4529-b6c2-fc7af1e6584a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d6197ac0-36f6-4af8-9011-6705b0a5ab30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f950877-c936-4fc3-9bfc-5938612e16f4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9326244-103b-4256-81d8-1e6bc63b61ea"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73509ebc-52ad-45c0-b985-b8fc663fdf48"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d10d9f85-754a-428d-b947-8e605a9db579"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af8e9bc3-a25e-441e-aad7-8778f4d4da11"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShootMain
        m_ShootMain = asset.FindActionMap("ShootMain", throwIfNotFound: true);
        m_ShootMain_Shoot = m_ShootMain.FindAction("Shoot", throwIfNotFound: true);
        m_ShootMain_Reload = m_ShootMain.FindAction("Reload", throwIfNotFound: true);
        m_ShootMain_Aim = m_ShootMain.FindAction("Aim", throwIfNotFound: true);
        m_ShootMain_SwitchRight = m_ShootMain.FindAction("SwitchRight", throwIfNotFound: true);
        m_ShootMain_SwitchLeft = m_ShootMain.FindAction("SwitchLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShootMain
    private readonly InputActionMap m_ShootMain;
    private IShootMainActions m_ShootMainActionsCallbackInterface;
    private readonly InputAction m_ShootMain_Shoot;
    private readonly InputAction m_ShootMain_Reload;
    private readonly InputAction m_ShootMain_Aim;
    private readonly InputAction m_ShootMain_SwitchRight;
    private readonly InputAction m_ShootMain_SwitchLeft;
    public struct ShootMainActions
    {
        private @Shoot m_Wrapper;
        public ShootMainActions(@Shoot wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_ShootMain_Shoot;
        public InputAction @Reload => m_Wrapper.m_ShootMain_Reload;
        public InputAction @Aim => m_Wrapper.m_ShootMain_Aim;
        public InputAction @SwitchRight => m_Wrapper.m_ShootMain_SwitchRight;
        public InputAction @SwitchLeft => m_Wrapper.m_ShootMain_SwitchLeft;
        public InputActionMap Get() { return m_Wrapper.m_ShootMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootMainActions set) { return set.Get(); }
        public void SetCallbacks(IShootMainActions instance)
        {
            if (m_Wrapper.m_ShootMainActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnShoot;
                @Reload.started -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnReload;
                @Aim.started -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnAim;
                @SwitchRight.started -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchRight;
                @SwitchRight.performed -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchRight;
                @SwitchRight.canceled -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchRight;
                @SwitchLeft.started -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchLeft;
                @SwitchLeft.performed -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchLeft;
                @SwitchLeft.canceled -= m_Wrapper.m_ShootMainActionsCallbackInterface.OnSwitchLeft;
            }
            m_Wrapper.m_ShootMainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @SwitchRight.started += instance.OnSwitchRight;
                @SwitchRight.performed += instance.OnSwitchRight;
                @SwitchRight.canceled += instance.OnSwitchRight;
                @SwitchLeft.started += instance.OnSwitchLeft;
                @SwitchLeft.performed += instance.OnSwitchLeft;
                @SwitchLeft.canceled += instance.OnSwitchLeft;
            }
        }
    }
    public ShootMainActions @ShootMain => new ShootMainActions(this);
    public interface IShootMainActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnSwitchRight(InputAction.CallbackContext context);
        void OnSwitchLeft(InputAction.CallbackContext context);
    }
}
